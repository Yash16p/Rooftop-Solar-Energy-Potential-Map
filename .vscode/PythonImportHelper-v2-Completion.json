[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "importPath": "shapely.geometry",
        "description": "shapely.geometry",
        "isExtraImport": true,
        "detail": "shapely.geometry",
        "documentation": {}
    },
    {
        "label": "orient",
        "importPath": "shapely.geometry.polygon",
        "description": "shapely.geometry.polygon",
        "isExtraImport": true,
        "detail": "shapely.geometry.polygon",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "calculate_solar_potential",
        "importPath": "model.solar_potential",
        "description": "model.solar_potential",
        "isExtraImport": true,
        "detail": "model.solar_potential",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "splitfolders",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "splitfolders",
        "description": "splitfolders",
        "detail": "splitfolders",
        "documentation": {}
    },
    {
        "label": "logging",
        "importPath": "src.logger",
        "description": "src.logger",
        "isExtraImport": true,
        "detail": "src.logger",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SolarPotentialResult",
        "kind": 6,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "class SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    image_path = db.Column(db.String(255), nullable=False)\n    area = db.Column(db.Float, nullable=False)\n    efficiency = db.Column(db.Float, nullable=False)\n    avg_radiance = db.Column(db.Float, nullable=False)\n    avg_radiance_model = db.Column(db.Float, nullable=False)\n    solar_potential_api = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "allowed_file",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def allowed_file(filename):\n    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS\ndef fetch_solar_radiance(latitude, longitude, start_date, end_date):\n    url = \"https://power.larc.nasa.gov/api/temporal/daily/point\"\n    params = {\n        'parameters': 'ALLSKY_SFC_SW_DWN',\n        'community': 'RE',\n        'longitude': longitude,\n        'latitude': latitude,\n        'start': start_date,",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "fetch_solar_radiance",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def fetch_solar_radiance(latitude, longitude, start_date, end_date):\n    url = \"https://power.larc.nasa.gov/api/temporal/daily/point\"\n    params = {\n        'parameters': 'ALLSKY_SFC_SW_DWN',\n        'community': 'RE',\n        'longitude': longitude,\n        'latitude': latitude,\n        'start': start_date,\n        'end': end_date,\n        'format': 'json'",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "calculate_monthly_average_radiance",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def calculate_monthly_average_radiance(data):\n    try:\n        dates = []\n        radiance_values = []\n        for date, value in data['properties']['parameter']['ALLSKY_SFC_SW_DWN'].items():\n            dates.append(datetime.datetime.strptime(date, '%Y%m%d'))\n            radiance_values.append(value)\n        df = pd.DataFrame({'date': dates, 'radiance': radiance_values})\n        df.set_index('date', inplace=True)\n        monthly_avg_radiance = df.resample('ME').mean()",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "calculate_solar_energy_potential",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def calculate_solar_energy_potential(monthly_avg_radiance, area, efficiency):\n    monthly_avg_radiance['total_energy'] = monthly_avg_radiance['radiance'] * area * efficiency * 365 / 12  # Energy in kWh/year\n    return monthly_avg_radiance\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/api/calculate_solar_data', methods=['POST'])\ndef calculate_solar_data():\n    data = request.json\n    latitude = data.get('latitude')",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/api/calculate_solar_data', methods=['POST'])\ndef calculate_solar_data():\n    data = request.json\n    latitude = data.get('latitude')\n    longitude = data.get('longitude')\n    coords = data.get('coordsArray')\n    start_date = data.get('startDate', '20230101')\n    end_date = data.get('endDate', '20231231')",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "calculate_solar_data",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def calculate_solar_data():\n    data = request.json\n    latitude = data.get('latitude')\n    longitude = data.get('longitude')\n    coords = data.get('coordsArray')\n    start_date = data.get('startDate', '20230101')\n    end_date = data.get('endDate', '20231231')\n    efficiency = data.get('efficiency', 0.18)\n    if None in [latitude, longitude, coords]:\n        return jsonify({'error': 'Missing required fields'}), 400",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "save_image",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def save_image():\n    data = request.json\n    logger.info(f\"Received data: {data}\")\n    latitude = data.get('latitude')\n    longitude = data.get('longitude')\n    coords = data.get('coordsArray')\n    static_map_url = data.get('staticMapUrl')\n    avg_radiance = data.get('avgRadiance', 0)\n    model_avg_radiance = data.get('modelAvgRadiance', 0)\n    solar_potential_api = data.get('solarPotentialAPI', 0)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "serve_image",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def serve_image(filename):\n    return send_from_directory('static/images', filename)\n@app.route('/api/results', methods=['GET'])\ndef get_results():\n    results = SolarPotentialResult.query.all()\n    return jsonify([{\n        'id': result.id,\n        'latitude': result.latitude,\n        'longitude': result.longitude,\n        'imagePath': result.image_path,",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "get_results",
        "kind": 2,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "def get_results():\n    results = SolarPotentialResult.query.all()\n    return jsonify([{\n        'id': result.id,\n        'latitude': result.latitude,\n        'longitude': result.longitude,\n        'imagePath': result.image_path,\n        'area': result.area,\n        'efficiency': result.efficiency,\n        'avgRadiance': result.avg_radiance,",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "logger = logging.getLogger(__name__)\napp = Flask(__name__)\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nUPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "app = Flask(__name__)\n# Database configuration\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nUPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nUPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nUPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "db = SQLAlchemy(app)\nUPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    image_path = db.Column(db.String(255), nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "UPLOAD_FOLDER = 'static/images'\nALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    image_path = db.Column(db.String(255), nullable=False)\n    area = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'tif', 'tiff'}\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    image_path = db.Column(db.String(255), nullable=False)\n    area = db.Column(db.Float, nullable=False)\n    efficiency = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": ".ipynb_checkpoints.app-checkpoint",
        "description": ".ipynb_checkpoints.app-checkpoint",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n# Database model\nclass SolarPotentialResult(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    image_path = db.Column(db.String(255), nullable=False)\n    area = db.Column(db.Float, nullable=False)\n    efficiency = db.Column(db.Float, nullable=False)\n    avg_radiance = db.Column(db.Float, nullable=False)",
        "detail": ".ipynb_checkpoints.app-checkpoint",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "class User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    firstname = db.Column(db.String(50), nullable=False)\n    lastname = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\nclass SolarEstimation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    latitude = db.Column(db.Float, nullable=False)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "SolarEstimation",
        "kind": 6,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "class SolarEstimation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    latitude = db.Column(db.Float, nullable=False)\n    longitude = db.Column(db.Float, nullable=False)\n    start_date = db.Column(db.String(8), nullable=False)\n    end_date = db.Column(db.String(8), nullable=False)\n    efficiency = db.Column(db.Float, nullable=False)\n    annual_energy_potential = db.Column(db.Float, nullable=False)\nclass Polygon(db.Model):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "Polygon",
        "kind": 6,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "class Polygon(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    coordinates = db.Column(db.Text, nullable=False)\n    image_path = db.Column(db.String(255))\n    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())\n    image_url= db.Column(db.String(255))\n    def __repr__(self):\n        return f'<Polygon {self.id}>'\n@app.route('/api/signup', methods=['POST'])",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "signup",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def signup():\n    try:\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        hashed_password = generate_password_hash(data['password'])\n        new_user = User(\n            firstname=data['firstname'],\n            lastname=data['lastname'],\n            email=data['email'],",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def login():\n    try:\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        user = User.query.filter_by(email=data['email']).first()\n        if user and check_password_hash(user.password, data['password']):\n            return jsonify({\"message\": \"Login successful\", \"user_id\": user.id}), 200\n        return jsonify({\"error\": \"Invalid credentials\"}), 401\n    except Exception as e:",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "estimate",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def estimate():\n    try:\n        data = request.json\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        response = requests.get('https://power.larc.nasa.gov/api/temporal/daily/point', params={\n            'parameters': 'ALLSKY_SFC_SW_DWN',\n            'community': 'RE',\n            'longitude': data['longitude'],\n            'latitude': data['latitude'],",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "save_polygon",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def save_polygon():\n    try:\n        data = request.get_json()\n        print(data)\n        coordinates = data['coordinates']\n        image_url = data['imageUrl']\n        user_id = data['user_id']\n        # Download the image from the URL\n        response = requests.get(image_url)\n        response.raise_for_status()",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "serve_react_app",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def serve_react_app(path):\n    if path != \"\" and os.path.exists(os.path.join(app.static_folder, path)):\n        return send_from_directory(app.static_folder, path)\n    else:\n        return send_from_directory(app.static_folder, 'index.html')\nif __name__ == '__main__':\n    with app.app_context():\n        db.create_all()\n    app.run(debug=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__, static_folder='../frontend/build', static_url_path='/')\nUPLOAD_FOLDER = 'uploads'\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nCORS(app)\n# CORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:5000\"}})\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "UPLOAD_FOLDER",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "UPLOAD_FOLDER = 'uploads'\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nCORS(app)\n# CORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:5000\"}})\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass User(db.Model):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app.config['UPLOAD_FOLDER']",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\nCORS(app)\n# CORS(app, resources={r\"/*\": {\"origins\": \"http://localhost:5000\"}})\napp.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    firstname = db.Column(db.String(50), nullable=False)\n    lastname = db.Column(db.String(50), nullable=False)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://aman:aman7303@localhost/solar_db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    firstname = db.Column(db.String(50), nullable=False)\n    lastname = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\nclass SolarEstimation(db.Model):",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    firstname = db.Column(db.String(50), nullable=False)\n    lastname = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\nclass SolarEstimation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "db = SQLAlchemy(app)\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    firstname = db.Column(db.String(50), nullable=False)\n    lastname = db.Column(db.String(50), nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password = db.Column(db.String(255), nullable=False)\nclass SolarEstimation(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "CustomException",
        "kind": 6,
        "importPath": "ML.src.exception",
        "description": "ML.src.exception",
        "peekOfCode": "class CustomException(Exception):\n    def __init__(self,error_message,error_detail:sys):\n        super().__init__(error_message)\n        self.error_message=error_message_detail(error_message,error_detail=error_detail)\n    def __str__(self):\n        return self.error_message",
        "detail": "ML.src.exception",
        "documentation": {}
    },
    {
        "label": "error_message_detail",
        "kind": 2,
        "importPath": "ML.src.exception",
        "description": "ML.src.exception",
        "peekOfCode": "def error_message_detail(error,error_detail:sys):\n    _,_,exc_tb=error_detail.exc_info()\n    file_name=exc_tb.tb_frame.f_code.co_filename\n    error_message=\"Error occured in python script name [{0}] line number [{1}] error message[{2}]\".format(\n    file_name,exc_tb.tb_lineno,str(error))\n    return error_message\nclass CustomException(Exception):\n    def __init__(self,error_message,error_detail:sys):\n        super().__init__(error_message)\n        self.error_message=error_message_detail(error_message,error_detail=error_detail)",
        "detail": "ML.src.exception",
        "documentation": {}
    },
    {
        "label": "get_requirements",
        "kind": 2,
        "importPath": "ML.setup",
        "description": "ML.setup",
        "peekOfCode": "def get_requirements(file_path:str)->List[str]:\n    '''\n        This Function will return all the required packages\n    '''\n    requirements = []\n    with open(file_path) as file_obj:\n        requirements = file_obj.readlines()\n        requirements = [req.replace(\"\\n\", \"\") for req in requirements]\n        if HYPEN_E_DOT in requirements:\n            requirements.remove(HYPEN_E_DOT)",
        "detail": "ML.setup",
        "documentation": {}
    },
    {
        "label": "HYPEN_E_DOT",
        "kind": 5,
        "importPath": "ML.setup",
        "description": "ML.setup",
        "peekOfCode": "HYPEN_E_DOT = \"-e .\"\ndef get_requirements(file_path:str)->List[str]:\n    '''\n        This Function will return all the required packages\n    '''\n    requirements = []\n    with open(file_path) as file_obj:\n        requirements = file_obj.readlines()\n        requirements = [req.replace(\"\\n\", \"\") for req in requirements]\n        if HYPEN_E_DOT in requirements:",
        "detail": "ML.setup",
        "documentation": {}
    }
]